---@type Database
local _Database

---@class Player
---@field _id string ID generated by mongodb for this users data instance in the database
---@field source string | number Players source id set by the server to target that player
---@field name string Players username when connecting to the server
---@field identifier string Primary identifier used to query the database
---@field identifiers { [string]: string } Extra identifier storage for possible ban evade logic
---@field whitelisted boolean If the player is whitelisted to play on the server or not
local Player = {
    COMPONENT = Stax.Component.Init("Player")
}

--- Creates a new instance of a player
---@param playerId string | number
---@return Player | nil
function Player.new(playerId)
    local newPlayer = setmetatable({
        _id = nil,
        source = playerId,
        name = GetPlayerName(playerId),
        identifier = nil,
        identifers = {},
        whitelisted = false
    }, Player)

    ---[[
    --- IDENTIFIER FETCH LOGIC
    ---]]
    local PrimaryIdentifier = _Config.Player.PrimaryIdentifier
    local identifiers = {}
    local identifierCount = GetNumPlayerIdentifiers(playerId)
    local foundPrimaryIdentifier = false

    for i = 1, identifierCount - 1 do
        local identifier = GetPlayerIdentifier(playerId, i)

        if identifier then
            local colonPos = string.find(identifier, ":") - 1
            local identifierType = string.sub(identifier, 1, colonPos)
            identifiers[identifierType] = identifier

            if identifierType == PrimaryIdentifier then
                foundPrimaryIdentifier = true
            end
        end
    end

    if not foundPrimaryIdentifier then
        DropPlayer(playerId, "Couldn't find the primary identifier required for this server! | " .. PrimaryIdentifier .. " |")
        return nil
    end

    newPlayer.identifier = identifiers[PrimaryIdentifier]
    newPlayer.identifers = identifiers

    return newPlayer
end

---@param self Player
---@return { sync: fun(callbacl: fun(results: table<any>)), async: fun(): Promise<table<any>> }
function Player.Load(self)
    return {
        sync = function(callback)
            _Database.FindOne({ collection = "players", query = { identifier = self.identifier } }, function(results)
                callback(results)
            end)
        end,
        async = function()
            local p = promise.new()

            _Database.FindOne({ collection = "players", query = { identifier = self.identifier } }, function(results)
                p:resolve(results)
            end)

            return Citizen.Await(p)
        end
    }
end

---@param self Player
---@return { sync: fun(callback: fun(success: boolean)), async: fun(): boolean }
function Player.Save(self)
    local saveData = {
        name = self.name,
        identifier = self.identifier,
        identifiers = self.identifiers
    }

    return {
        sync = function(callback)
            _Database.UpdateOne({ collection = "players", query = { _id = self._id }, update = saveData }, function(updatedCount)
                if updatedCount > 0 then
                    callback(true)
                else
                    callback(false)
                end
            end)
        end,
        async = function()
            local p = promise.new()

            _Database.UpdateOne({ collection = "players", query = { _id = self._id }, update = saveData }, function(updatedCount)
                if updatedCount > 0 then
                    p:resolve(true)
                else
                    p:resolve(false)
                end
            end)

            return Citizen.Await(p)
        end
    }
end

--- Bans the player from the server with an admin player check
---@param self Player
---@param admin Player
---@return { sync: fun(callback: fun(results: { insertCount: number, insertedIds: table })), async: fun(): { insertCount: number, insertedIds: table } } | nil
function Player.Ban(self, admin)
    if not admin then
        return
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local banData = {}

    return {
        sync = function(callback)
            _Database.InsertOne({ collection = "player_bans", document = banData }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.InsertOne({ collection = "player_bans", document = banData }, function(insertCount, insertedIds)
                p:resolve(insertCount, insertedIds)
            end)

            return Citizen.Await(p)
        end
    }
end

--- Kicks the player from the server with an admin player check
---@param self Player
---@param admin Player
---@return {} | nil
function Player.Kick(self, admin)
    if not admin then
        return
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local kickData = {}

    -- insertCount: number, insertedIds: table

    return {
        sync = function(callback)
            _Database.InsertOne({ collection = "player_kicks", document = kickData }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.InsertOne({ collection = "player_kicks", document = kickData }, function(insertCount, insertedIds)
                p:resolve({
                    insertCount = insertCount,
                    insertedIds = insertedIds
                })
            end)

            return Citizen.Await(p)
        end
    }
end

--- Warns the player with a notification with an admin player check
---@param self Player
---@param admin Player
---@return {} | nil
function Player.Warn(self, admin)
    if not admin then
        return
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local warnData = {}

    return {
        sync = function(callback)
            _Database.InsertOne({ collection = "player_warns", document = warnData }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.InsertOne({ collection = "player_warns", document = warnData }, function(insertCount, insertedIds)
                p:resolve({
                    insertCount = insertCount,
                    insertedIds = insertedIds
                })
            end)

            return Citizen.Await(p)
        end
    }
end

--- Fetches the players bans
function Player.FetchBans(self)
    return {
        sync = function(callback)
            _Database.Find({ collection = "player_bans", query = { player_id = self._id } }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.Find({ collection = "player_bans", query = { player_id = self._id } }, function (results)
                p:resolve(results)
            end)

            return Citizen.Await(p)
        end
    }
end

local function _loadComponents()
    _Database = Stax.Component.FetchAsync("Database")
end

---[[
--- EVENTS
---]]
Stax.Event("ComponentLoader", "Ready").create(false, _loadComponents)

---[[
--- REGISTER COMPONENT
---]]
Stax.Component.Register(Player)
--- COMPONENTS
---@type Database
local _Database

--- CONFIGS
local PrimaryIdentifier = Stax.FetchConfig("Player.PrimaryIdentifier")

---@class Ban
---@field public reason string Reason for the infraction
---@field public permanent boolean If the ban is permanent or not
---@field public timestamp number The timestamp the player will be unbanned at
---@field public admin_id string Admins MongoDB player id

---@class Kick
---@field public reason string Reason for the infraction
---@field public timestamp number The timestamp the player was kicked from the server
---@field public admin_id string Admins MongoDB player id

---@class Warn
---@field public reason string Reason for the infraction
---@field public timestamp number The timestamp the player was warned on the server
---@field public admin_id string Admins MongoDB player id

---@class StaxPlayer
---@field public _id string ID generated by mongodb for this users data instance in the database
---@field public source number Players source id set by the server to target that player
---@field public name string Players username when connecting to the server
---@field public identifier string Primary identifier used to query the database
---@field public identifiers { [string]: string } Extra identifier storage for possible ban evade logic
---@field public whitelisted boolean If the player is whitelisted to play on the server or not
---@field public bans table<number, Ban> The players ban objects
---@field public kicks table<number, Kick> The players kick objects
---@field public warns table<number, Warn> The players warn objects
local Player = {
    COMPONENT = Stax.Component.Init("Player")
}

--- Creates a new instance of a player
---@param playerId string
---@return StaxPlayer | nil
function Player.new(playerId)
    local newPlayer = {
        _id = nil,
        source = tonumber(playerId),
        name = GetPlayerName(playerId),
        identifier = nil,
        identifiers = {},
        whitelisted = false,
        bans = {},
        kicks = {},
        warns = {}
    }

    ---[[
    --- IDENTIFIER FETCH LOGIC
    ---]]
    local foundPrimary, primaryIdentifier, identifiers = Player.GetIdentifiers(newPlayer)

    if not foundPrimary then
        return nil
    end

    newPlayer.identifier = primaryIdentifier
    newPlayer.identifiers = identifiers

    -- TODO: LOAD AND SAVE LOGIC
    local saveSuccess = Player.Save(newPlayer).async()

    if not saveSuccess then
        return nil
    end

    return newPlayer
end

function Player.GetIdentifiers(self)
    local identifiers = {}
    local foundPrimaryIdentifier = false
    local backupLicenseType

    local identifierCount = GetNumPlayerIdentifiers(tostring(self.source))

    for i = 1, identifierCount - 1 do
        local identifier = GetPlayerIdentifier(tostring(self.source), i)

        if identifier then
            local colonPos = string.find(identifier, ":") - 1
            local identifierType = string.sub(identifier, 1, colonPos)
            identifiers[identifierType] = identifier

            if identifierType == PrimaryIdentifier then
                foundPrimaryIdentifier = true
            else
                if PrimaryIdentifier == "license" then
                    if identifierType == "license2" then
                        foundPrimaryIdentifier = true
                        backupLicenseType = "license2"
                    end
                elseif PrimaryIdentifier == "license2" then
                    if identifierType == "license" then
                        foundPrimaryIdentifier = true
                        backupLicenseType = "license"
                    end
                end
            end
        end
    end

    local primaryBackup

    if foundPrimaryIdentifier then
        if backupLicenseType then
            primaryBackup = identifiers[backupLicenseType]
        end
    end

    return foundPrimaryIdentifier, primaryBackup or identifiers[PrimaryIdentifier], identifiers
end

---@param self StaxPlayer
---@return { sync: fun(callbacl: fun(results: table<any>)), async: fun(): promise<table<any>> }
function Player.Load(self)
    return {
        sync = function(callback)
            _Database.FindOne({ collection = "players", query = { identifier = self.identifier } }, function(results)
                callback(results)
            end)
        end,
        async = function()
            local p = promise.new()

            _Database.FindOne({ collection = "players", query = { identifier = self.identifier } }, function(results)
                p:resolve(results)
            end)

            return Citizen.Await(p)
        end
    }
end

---@param self StaxPlayer
---@param upsert? boolean
---@return { sync: fun(callback: fun(success: boolean)), async: fun(): boolean }
function Player.Save(self, upsert)
    if upsert == nil then
        upsert = false
    end

    local saveData = {
        name = self.name,
        identifiers = self.identifiers
    }

    return {
        sync = function(callback)
            _Database.UpdateOne({
                collection = "players",
                query = {
                    {
                        _id = self._id
                    },
                    {
                        ["$set"] = saveData
                    }
                },
                update = saveData,
                options = { upsert = upsert }
            }, function(updatedCount)
                if updatedCount > 0 then
                    callback(true)
                else
                    callback(false)
                end
            end)
        end,
        async = function()
            local p = promise.new()

            _Database.UpdateOne({
                collection = "players",
                query = {
                    {
                        {
                            _id = self._id
                        },
                        {
                            ["$set"] = saveData
                        }
                    }
                },
                update = saveData,
                options = { upsert = upsert }
            }, function(updatedCount)
                if updatedCount > 0 then
                    p:resolve(true)
                else
                    p:resolve(false)
                end
            end)

            return Citizen.Await(p)
        end
    }
end

--- Bans the player from the server with an admin player check
---@param self StaxPlayer
---@param reason string
---@param time osdateparam
---@param admin StaxPlayer
---@return { sync: fun(callback: fun(results: { insertCount: number, insertedIds: table })), async: fun(): { insertCount: number, insertedIds: table } } | nil
function Player.Ban(self, reason, time, admin)
    local permanent = false

    if not admin then
        return
    end

    if not time then
        permanent = true
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local dateTime = os.time() + os.time(time)

    ---@type Ban
    local banData = {
        reason = reason,
        permanent = permanent,
        timestamp = os.time(),
        admin_id = admin._id
    }

    return {
        sync = function(callback)
            _Database.InsertOne({ collection = "player_bans", document = banData }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.InsertOne({ collection = "player_bans", document = banData }, function(insertCount, insertedIds)
                p:resolve({
                    insertCount = insertCount,
                    insertedIds = insertedIds
                })
            end)

            return Citizen.Await(p)
        end
    }
end

--- Kicks the player from the server with an admin player check
---@param self StaxPlayer
---@param admin StaxPlayer
---@return {} | nil
function Player.Kick(self, admin)
    if not admin then
        return
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local kickData = {}

    -- insertCount: number, insertedIds: table

    return {
        sync = function(callback)
            _Database.InsertOne({ collection = "player_kicks", document = kickData }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.InsertOne({ collection = "player_kicks", document = kickData }, function(insertCount, insertedIds)
                p:resolve({
                    insertCount = insertCount,
                    insertedIds = insertedIds
                })
            end)

            return Citizen.Await(p)
        end
    }
end

--- Warns the player with a notification with an admin player check
---@param self StaxPlayer
---@param admin StaxPlayer
---@return {} | nil
function Player.Warn(self, admin)
    if not admin then
        return
    end

    -- TODO: CHECK ADMIN PLAYER PERMISSIONS
    local warnData = {}

    return {
        sync = function(callback)
            _Database.UpdateOne({ collection = "player_warns", document = warnData, options = { upsert = true } },
                callback)
        end,
        async = function()
            local p = promise.new()

            _Database.UpdateOne({ collection = "player_warns", document = warnData, options = { upsert = true } },
                function(updatedCount)
                    p:resolve({
                        updatedCount = updatedCount
                    })
                end)

            return Citizen.Await(p)
        end
    }
end

--- Fetches the players bans
---@param self StaxPlayer
function Player.FetchBans(self)
    return {
        sync = function(callback)
            _Database.Find({ collection = "player_bans", query = { player_id = self._id } }, callback)
        end,
        async = function()
            local p = promise.new()

            _Database.Find({ collection = "player_bans", query = { player_id = self._id } }, function(results)
                p:resolve(results)
            end)

            return Citizen.Await(p)
        end
    }
end

local function _loadComponents()
    _Database = Stax.Component.FetchAsync("Database")
end

---[[
--- EVENTS
---]]
Stax.Event("ComponentLoader", "Ready").create(false, _loadComponents)

---[[
--- REGISTER COMPONENT
---]]
Stax.Component.Register(Player)
